
from math import *
import random
import numpy as np
from matplotlib import pyplot as plt #für die graphiken
import time

def interpol(daten, x):
    L = 0
    for i in range(len(daten)):
        L += daten[i][1]*lagrange(daten, i, x)

    return L

def lagrange(daten, i, x):
    L = 1
    for j in range(len(daten)):
        if j != i:
            L = L * (x-daten[j][0])/(daten[i][0]-daten[j][0])
    return L

# x Werte und eine Liste, die zu jeden x-Werte eine Liste der y-Werte enthällt
def graph_off(x, y_werte ,vergleich = False):
    y_listen = []
    Summe = list([])
    for i in range(len(y_werte[0])):
        y_listen += [[]]
        for j in y_werte:
            y_listen[i] += [j[i]]
            #if i == 0:
                #Summe += [sum(j)]
    #print(x,y_listen)

    #Das Bild
    plt.figure(figsize=(12,8))

    farben = [ 'dimgray' , 'silver', 'lightcoral', 'firebrick', 'darkred' ,'red', 'orangered' , 'darkorange', 'gold', 'yellow' , 'yellowgreen' , 'limegreen', 'forestgreen' , 'darkgreen' , 'teal' , 'royalblue' , 'navy' , 'indigo']

    for y in range(len(y_listen)):
        plt.plot(x,y_listen[y], label = "Bereich " + str(y+1) , color = farben[y])


    #plt.plot(x, Summe , label = "Summe" , color = 'black')
    plt.xlabel('Winkel')
    plt.ylabel('Punkte')
    #plt.ylim(10,-10)

    if vergleich:
        x = np.linspace(0,2*pi,200)
        x_2 = np.linspace(0,pi,100)
        plt.plot(x, 50_000*((pi-x)/pi)**2, label = '$((x-pi)/pi)^2$', color= 'indigo')
        plt.plot(x_2,50_000*(x_2/pi)**2, label = "$(x/pi)^2$", color = 'purple')
        plt.plot(x_2, 50_000*(x_2/pi)*(pi-x_2)/pi, label = "$(x/pi)*(pi-x)/pi$", color = 'black')

    plt.legend()
    plt.savefig('el_20231229_03_11.png')
    plt.show()

def graph_vergleich(x, y_werte ):
    x = list(x)
    y_listen = []
    Summe = list([])
    for i in range(len(y_werte[0])):
        y_listen += [[]]
        for j in y_werte:
            y_listen[i] += [j[i]]


    #Das Bild
    plt.figure(figsize=(12,8))

    farben = [ 'dimgray' , 'silver', 'lightcoral', 'firebrick', 'darkred' ,'red', 'orangered' , 'darkorange', 'gold', 'yellow' , 'yellowgreen' , 'limegreen', 'forestgreen' , 'darkgreen' , 'teal' , 'royalblue' , 'navy' , 'indigo']

    x = x[0:100]
    for y in range(len(y_listen)):
        y_listen[y] = y_listen[y][0:100]
    print(len(y_listen[0]))

    for i in range(len(y_listen)):
        if i == 0 or i == 7:
            show = []
            for f in range(len(y_listen[i])):
                show += [y_listen[i][f] - 50_000*((pi-x[f])/pi)**2]
            plt.plot(x, show, label = "Bereich 1")
        elif i == 3 or i == 4:
            show = []
            for f in range(len(y_listen[i])):
                show += [y_listen[i][f] - 50_000*(x[f]/pi)**2]
            plt.plot(x, show, label = "Bereich 4")
        else:
            show = []
            for f in range(len(y_listen[i])):
                show += [y_listen[i][f] - 50_000*(x[f]/pi)*((pi-x[f])/pi)]
            plt.plot(x, show, label = "Bereich 2/3")
    x = np.linspace(0,pi,100)
    plt.plot(x, interpol([(0,0),(pi,0),(pi/2,0),(4*pi/5,1_184.1),(pi/5,1_181.1)],x), label ='Interpol von Fehler', color= 'black')
    plt.xlabel('Winkel')
    plt.ylabel('Punkte')
    plt.legend()
    plt.savefig('el_20231229_03_13.png')
    plt.show()


Winkel = np.linspace(0,2*pi,200)
"""with open('el_20231228_03.txt', "r") as speicher:
    speicher.readline()
    Daten = np.array(list(speicher.readline())).reshape(len(Winkel),8).tolist()"""
Daten =  [[6.283185244057254], [6.175389336458441], [6.067615642094678], [5.959886578193906], [5.8522246546275625], [5.744652615584828], [5.6371935189158116], [5.529870816509256], [5.422708435929913], [5.315730863515597], [5.2089632291021], [5.102431392502474], [4.996162031816958], [4.890182733584883], [4.784522084712494], [4.679209766014408], [4.5742766470908816], [4.46975488212388], [4.365678006009277], [4.26208103004631], [4.159000536175724], [4.05647476849154], [3.954543720445109], [3.853249215813034], [3.752634981112415], [3.6527467067197943], [3.553632093490486], [3.45534088119149], [3.35792485456993], [3.2614378224013914], [3.1659355644284055], [3.0714757407472835], [2.978117757979179], [2.8859225865256635], [2.7949525234247137], [2.7052708958590106], [2.6169417012934204], [2.5300291815941405], [2.444597330351961], [2.360709335012645], [2.278426958283463], [2.197809866559491], [2.1189149166582304], [2.0417954157640663], [1.966500372903906], [1.8930737631969317], [1.8215538282228936], [1.7519724368318377], [1.6843545303319747], [1.6187176741022453], [1.5866455297928415], [1.6512876709835798], [1.717916772821785], [1.786519087559336], [1.8570733132339425], [1.9295509815824348], [2.003916962218387], [2.0801300625432857], [2.158143700207951], [2.2379066238122762], [2.3193636578522163], [2.4024564494979392], [2.487124197338667], [2.573304345440298], [2.6609332296142174], [2.749946666403874], [2.8402804787266938], [2.931870955192574], [3.024655242749546], [3.118571674432797], [3.213560035611927], [3.3095617732748224], [3.406520153608663], [3.5043803735056294], [3.603089631702468], [3.7025971651264182], [3.8028542557263103], [3.903814212669145], [4.005432334322416], [4.107665853954699], [4.210473872597583], [4.313817282038681], [4.417658680471275], [4.521962282918025], [4.626693828178423], [4.731820483723164], [4.8373107496724685], [4.943134362747552], [5.0492622008721835], [5.1556661889204385], [5.262319205955112], [5.369194994173986], [5.476268069675875], [5.583513635071808], [5.690907493895862], [5.798425966712832], [5.906045808774243], [6.013744129037521], [6.121498310334818], [6.229285930457118], [6.229285930457118], [6.121498310334818], [6.013744129037521], [5.906045808774243], [5.798425966712832], [5.690907493895862], [5.583513635071808], [5.476268069675875], [5.369194994173986], [5.262319205955112], [5.1556661889204385], [5.0492622008721835], [4.943134362747552], [4.8373107496724685], [4.73182048372317], [4.62669382817842], [4.521962282918025], [4.417658680471275], [4.313817282038681], [4.210473872597583], [4.107665853954699], [4.005432334322416], [3.9038142126691486], [3.8028542557263103], [3.702597165126421], [3.603089631702468], [3.5043803735056267], [3.406520153608663], [3.309561773274824], [3.213560035611927], [3.118571674432797], [3.024655242749544], [2.9318709551925766], [2.8402804787266938], [2.749946666403872], [2.660933229614219], [2.573304345440297], [2.4871241973386677], [2.4024564494979392], [2.3193636578522154], [2.237906623812277], [2.15814370020795], [2.0801300625432866], [2.003916962218387], [1.929550981582433], [1.8570733132339425], [1.786519087559336], [1.717916772821786], [1.6512876709835806], [1.5866455297928415], [1.6187176741022444], [1.6843545303319747], [1.7519724368318377], [1.8215538282228936], [1.8930737631969308], [1.966500372903906], [2.0417954157640663], [2.1189149166582304], [2.197809866559491], [2.278426958283461], [2.360709335012645], [2.4445973303519617], [2.5300291815941405], [2.616941701293422], [2.7052708958590106], [2.7949525234247137], [2.8859225865256635], [2.978117757979179], [3.0714757407472835], [3.165935564428401], [3.2614378224013914], [3.3579248545699327], [3.45534088119149], [3.553632093490486], [3.6527467067197907], [3.752634981112415], [3.853249215813034], [3.954543720445109], [4.05647476849154], [4.159000536175724], [4.26208103004631], [4.365678006009277], [4.46975488212388], [4.5742766470908816], [4.679209766014408], [4.784522084712494], [4.890182733584883], [4.996162031816958], [5.102431392502474], [5.208963229102093], [5.315730863515597], [5.422708435929913], [5.529870816509256], [5.6371935189158116], [5.744652615584828], [5.8522246546275625], [5.959886578193906], [6.067615642094678], [6.175389336458441], [6.283185244057254]]
print(type(Daten))
#graph_off(Winkel, Daten, True)
graph_vergleich(Winkel, Daten)
